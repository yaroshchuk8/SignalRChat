@page "/chat"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.SignalR.Client
@using SignalRChat.Data
@using SignalRChat.Services
@using SignalRChat.Models
@inject LanguageService Language
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<EditForm FormName="Form" Model="@msg" OnValidSubmit="@Send">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Name:</label>
        <InputText @bind-Value="@msg.Name" class="form-control" />
        <ValidationMessage For="@(() => msg.Name)" />
    </div>

    <div class="form-group">
        <label>Message:</label>
        <InputText @bind-Value="@msg.Text" class="form-control" />
        <ValidationMessage For="@(() => msg.Text)" />
    </div>

    <button type="submit" class="btn btn-primary mt-3"  disabled="@(!@IsConnected)">Send</button>
</EditForm>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message.Name: @message.Text [@message.Sentiment]</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<Message> messages = new List<Message>();
    private Message msg = new Message();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<Message>("ReceiveMessage", (message) =>
        {
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        GetMessagesFromDb();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            msg.Sentiment = await Language.AnalyzeSentimentAsync(msg.Text);
            msg.Id = 0;

            await DbContext.ChatMessages.AddAsync(msg);
            await DbContext.SaveChangesAsync();

            await hubConnection.SendAsync("SendMessage", msg);
        }
    }

    private void GetMessagesFromDb()
    {
        messages = DbContext.ChatMessages.ToList();
        InvokeAsync(StateHasChanged);
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}